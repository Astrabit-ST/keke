#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.7
# from lexical definition file "lib/keke_lexer.rex".
#++

require "racc/parser"

class KekeParser < Racc::Parser
  require "strscan"

  class ScanError < StandardError; end

  attr_reader :lineno
  attr_reader :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno = 1
    @state = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end

  alias :scan :scan_str

  def load_file(filename)
    @filename = filename
    File.open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file(filename)
    load_file(filename)
    do_parse
  end

  def next_token
    return if @ss.eos?

    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno += 1 if text == "\n"
    token = case @state
      when nil
        case
        when (text = @ss.scan(/([ \t]+)/))
        when (text = @ss.scan(/(\n|\r\n)/))
          action { [:SPLIT, text] }
        when (text = @ss.scan(/(\>>.*)/))
        when (text = @ss.scan(/[0-9]+/))
          action { [:LITERAL, text.to_i] }
        when (text = @ss.scan(/[0-9]+\.[0-9]+/))
          action { [:LITERAL, text.to_f] }
        when (text = @ss.scan(/(\$.*)/))
          action { [:STATEMENT, text] }
        when (text = @ss.scan(/\"([^"]*)\"/))
          action { [:LITERAL, text] }
        when (text = @ss.scan(/"true"/))
          action { [:LITERAL, true] }
        when (text = @ss.scan(/"false"/))
          action { [:LITERAL, false] }
        when (text = @ss.scan(/"on"/))
          action { [:LITERAL, true] }
        when (text = @ss.scan(/"off"/))
          action { [:LITERAL, false] }
        when (text = @ss.scan(/"nil"/))
          action { [:LITERAL, nil] }
        when (text = @ss.scan(/"blank"/))
          action { [:LITERAL, nil] }
        when (text = @ss.scan(/","/))
          action { [:COMMA, text] }
        when (text = @ss.scan(/"is"/))
          action { [:IS, text] }
        when (text = @ss.scan(/"are"/))
          action { [:IS, text] }
        when (text = @ss.scan(/"end"/))
          action { [:END, text] }
        when (text = @ss.scan(/"say"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"text_options"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"switch"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"variable"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"self_switch"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"input_number"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"wait"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"exit"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"erase"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"common_event"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"label"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"jump"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"items"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"timer"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"weapons"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"armor"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"party"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"windowskin"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"battle_bgm"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"battle_endme"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"save_access"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"menu_access"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"encounter"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"transfer"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"move_event"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"scroll"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"map_settings"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"fog_tone"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"fog_opacity"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"animation"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"transparent"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"wait_for_move"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"prepare_for_transition"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"transition"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"screen_tone"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"flash"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"shake"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"picture"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"move_picture"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"rotate_picture"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"tint_picture"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"erase_picture"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"weather"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"bgm"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"bgs"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"fade_bgm"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"fade_bgs"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"memorize_sound"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"restore_sound"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"me"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"se"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"stop_se"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"battle"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"shop"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"name_input"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"hp"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"sp"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"state"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"recover_all"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"exp"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"level"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"parameters"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"skills"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"equipment"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"actor_name"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"actor_class"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"actor_graphic"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"enemy_hp"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"enemy_sp"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"enemy_state"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"recover_enemy"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"enemy_appearance"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"enemy_transform"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"show_battle_animation"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"deal_damage"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"force_action"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"abort_battle"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"call_menu"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"call_save"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"gameover"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"return_title"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"eval"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"raw_command"/))
          action { [:COMMAND, text] }
        when (text = @ss.scan(/"move"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"step"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"jump"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"turn"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"change_speed"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"change_frequency"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"set_move_animation"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"set_stop_animation"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"direction_fix"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"through"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"always_on_top"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"graphic"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"opacity"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"blending"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/"eval_move"/))
          action { [:MOVE_COMMAND, text] }
        when (text = @ss.scan(/([a-z]|_)\w*/))
          action { [:PROPERTY, text] }
        else
          text = @ss.string[@ss.pos..-1]
          raise ScanError, "can not match: '" + text + "'"
        end  # if
      else
        raise ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    token
  end  # def _next_token
end # class
